// -*- java -*-

class Board {
  field Array a;

  constructor Board new() {
    var int i;

    let a = Array.new(16);
    let i = 0;
    while (i < 16) {
        let a[i] = 0;
        let i = i + 1;
    }

    return this;
  }

  // draw the board on the screen
  method void draw() {
    var int i;
    let i = 0;
    do Screen.clearScreen();
    while (i < 16) {
      do drawField(i);
      let i = i + 1;
    }
    return;
  }

  method void drawField(int i) {
    var int x, y;
    let y = i / 4;
    let x = i - (4*y);
    do Screen.setColor(true);
    do Screen.drawRectangle(x*64 + 128, y*64, x*64 + 60 + 128, y * 64 + 60);
    if (a[i] = 0) {
      do Screen.setColor(false);
      do Screen.drawRectangle(x*64 + 1 + 128, y*64 + 1,
                    x*64 + 59 + 128, y * 64 + 59);
    } else {
      do Screen.setColor(false);
      do Screen.drawRectangle(x*64 + 3 + 128, y*64 + 3,
                    x*64 + 57 + 128, y * 64 + 57);
      do Output.moveCursor(y * 6 + 2, 8 * x + 20);
      do Output.printInt(a[i]);
    }
    return;
  }

  // insert 2 (with probability 90%) or 4 (with probability 10%)
  // at a random location
  // returns true if insertion succeeded
  method boolean insert() {
    var int target, num;
    var int i;

    let i = 0;
    while (i < 16) {
      if (a[i] = 0) {
        let i = 100;
      } else {
        let i = i + 1;
      }
    }
    if (~(i = 100)) {
      return false;
    }

    let target = -1;
    while (target < 0) {
      let target = LCGRandom.randRange(0, 15);
      if (~(a[target] = 0)) {
        let target = -1;
      }
    }
    let num = LCGRandom.randRange(0, 9);
    if (num = 0) {
      let num = 4;
    } else {
      let num = 2;
    }
    let a[target] = num;

    return true;
  }

  // perform a left push, return number of points gained
  method int pushLeft() {
    var int i, j;
    var int idx, curr, last, val;
    var int score;
    let score = 0;
    
    let i = 0;
    while (i < 4) {
      let last = (i+1)*4;
      let j = 0;
      while (j < 4) {
        let idx = i*4 + j;
        let curr = idx;
        let val = 0;
        while (curr < last) {
          if (val = 0) {
            if (a[curr] > 0) {
              let val = a[curr];
              let a[curr] = 0;
            }
            let curr = curr + 1;
          } else {
            if (a[curr] > 0) {
              if (a[curr] = val) {
                let val = val * 2;
                let a[curr] = 0;
                let score = score + val;
              }
              let curr = last;
            } else {
              let curr = curr + 1;
            }
          }
        }
        let a[idx] = val;
        let j = j + 1;
      }
      let i = i + 1;
    }
    return score;
  }

  method void swap_idx(int sw1, int sw2) {
    var int temp;
    let temp = a[sw1];
    let a[sw1] = a[sw2];
    let a[sw2] = temp;
    return;
  }
  method void mirror() {
    var int i;

    let i = 0;
    while (i < 4) {
      do swap_idx(i*4+0, i*4+3);
      do swap_idx(i*4+1, i*4+2);
      let i = i + 1;
    }
    return;
  }
  method void transpose() {
    var int i, j;
    var int idx;

    let i = 0;
    while (i < 4) {
      let j = i + 1;
      while (j < 4) {
        do swap_idx(i*4 + j, j*4 + i);
        let j = j + 1;
      }
      let i = i + 1;
    }
    return;
  }

  method int pushUp() {
    var int score;

    do transpose();
    let score = pushLeft();
    do transpose();
    return score;
  }

  method int pushDown() {
    var int score;

    do transpose();
    do mirror();
    let score = pushLeft();
    do mirror();
    do transpose();
    return score;
  }

  method int pushRight() {
    var int score;

    do mirror();
    let score = pushLeft();
    do mirror();
    return score;
  }
}
