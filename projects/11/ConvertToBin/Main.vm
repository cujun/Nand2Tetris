// class Main
// function void Main.main
function Main.main 1
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0 // void
push constant 8000
call Memory.peek 1
pop local 0
push local 0
call Main.convert 1
pop temp 0 // void
push constant 0
return
// function void Main.convert
function Main.convert 3
push constant 0 // true
not
pop local 2
label MAIN.CONVERT.WHILE0_LOOP
push local 2
not
if-goto MAIN.CONVERT.WHILE0_END
push local 1
push constant 1
add
pop local 1
push local 0
call Main.nextMask 1
pop local 0
push local 1
push constant 16
gt
not
not
if-goto MAIN.CONVERT.IF0_ELSE
push argument 0
push local 0
and
push constant 0
eq
not
not
if-goto MAIN.CONVERT.IF1_ELSE
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0 // void
goto MAIN.CONVERT.IF1_END
label MAIN.CONVERT.IF1_ELSE
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0 // void
label MAIN.CONVERT.IF1_END
goto MAIN.CONVERT.IF0_END
label MAIN.CONVERT.IF0_ELSE
push constant 0 // false
pop local 2
label MAIN.CONVERT.IF0_END
goto MAIN.CONVERT.WHILE0_LOOP
label MAIN.CONVERT.WHILE0_END
push constant 0
return
// function int Main.nextMask
function Main.nextMask 0
push argument 0
push constant 0
eq
not
if-goto MAIN.NEXTMASK.IF2_ELSE
push constant 1
return
goto MAIN.NEXTMASK.IF2_END
label MAIN.NEXTMASK.IF2_ELSE
push argument 0
push constant 2
call Math.multiply 2
return
label MAIN.NEXTMASK.IF2_END
// function void Main.fillMemory
function Main.fillMemory 0
label MAIN.FILLMEMORY.WHILE1_LOOP
push argument 1
push constant 0
gt
not
if-goto MAIN.FILLMEMORY.WHILE1_END
push argument 0
push argument 2
call Memory.poke 2
pop temp 0 // void
push argument 1
push constant 1
sub
pop argument 1
push argument 0
push constant 1
add
pop argument 0
goto MAIN.FILLMEMORY.WHILE1_LOOP
label MAIN.FILLMEMORY.WHILE1_END
push constant 0
return
